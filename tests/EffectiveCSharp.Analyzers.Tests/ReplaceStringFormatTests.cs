using Verifier = EffectiveCSharp.Analyzers.Tests.Helpers.AnalyzerVerifier<EffectiveCSharp.Analyzers.ReplaceStringFormatAnalyzer>;

namespace EffectiveCSharp.Analyzers.Tests;

public class ReplaceStringFormatTests
{
    [Fact]
    public async Task StringFormatWithReplacement()
    {
        await Verifier.VerifyAnalyzerAsync(
            """
            class Program
            {
                void Main()
                {
                    var str = {|ECS0004:string.Format("Hello, {0}!", "world")|};
                }
            }
            """,
            ReferenceAssemblyCatalog.Latest);
    }

    [Fact]
    public async Task StringFormatWithoutReplacement()
    {
        await Verifier.VerifyAnalyzerAsync(
            """
            class Program
            {
                void Main()
                {
                    var str = string.Format("Hello, world!", "world");
                }
            }
            """,
            ReferenceAssemblyCatalog.Latest);
    }

    [Fact]
    public async Task InterpolatedStringValueType()
    {
        // The code generated by the string interpolation will call a formatting
        // method whose argument is a params array of objects (until .NET 9)
        // The Math.PI property is a double, which is a value type. In order to
        // coerce that double to be an Object for the params, it will be boxed.
        await Verifier.VerifyAnalyzerAsync(
            """
            class Program
            {
                void Main()
                {
                    Console.WriteLine($"The value of pi is {Math.PI}");
                }
            }
            """,
            ReferenceAssemblyCatalog.Latest);
    }

    [Fact]
    public async Task InterpolatedStringStringType()
    {
        // The code generated by the string interpolation will call a formatting
        // method whose argument is a params array of objects (until .NET 9)
        // The Math.PI property is a double, which is a value type. In order to
        // coerce that double to be an Object for the params, it will be boxed.
        //
        // You should use expressions to convert arguments to strings to avoid
        // the box
        await Verifier.VerifyAnalyzerAsync(
            """
            class Program
            {
                void Main()
                {
                    Console.WriteLine($"The value of pi is {Math.PI.ToString()}");
                }
            }
            """,
            ReferenceAssemblyCatalog.Latest);
    }

    [Fact]
    public async Task InterpolatedStringStringTypeFormatting()
    {
        // The code generated by the string interpolation will call a formatting
        // method whose argument is a params array of objects (until .NET 9)
        // The Math.PI property is a double, which is a value type. In order to
        // coerce that double to be an Object for the params, it will be boxed.
        //
        // You should use expressions to convert arguments to strings to avoid
        // the box
        await Verifier.VerifyAnalyzerAsync(
            """
            class Program
            {
                void Main()
                {
                    Console.WriteLine($"The value of pi is {Math.PI.ToString("F2")}");
                }
            }
            """,
            ReferenceAssemblyCatalog.Latest);
    }

    [Fact]
    public async Task InterpolatedStringStringTypeFormattingWithInterpolation()
    {
        // The code generated by the string interpolation will call a formatting
        // method whose argument is a params array of objects (until .NET 9)
        // The Math.PI property is a double, which is a value type. In order to
        // coerce that double to be an Object for the params, it will be boxed.
        //
        // You should use expressions to convert arguments to strings to avoid
        // the box
        await Verifier.VerifyAnalyzerAsync(
            """
            class Program
            {
                void Main()
                {
                    Console.WriteLine($"The value of pi is {Math.PI:F2}");
                }
            }
            """,
            ReferenceAssemblyCatalog.Latest);
    }

    [Fact]
    public async Task InterpolatedStringConditionalFormatting()
    {
        // The code generated by the string interpolation will call a formatting
        // method whose argument is a params array of objects (until .NET 9)
        // The Math.PI property is a double, which is a value type. In order to
        // coerce that double to be an Object for the params, it will be boxed.
        //
        // You should use expressions to convert arguments to strings to avoid
        // the box
        await Verifier.VerifyAnalyzerAsync(
            """
            class Program
            {
                void Main()
                {
                    bool round = false;
                    Console.WriteLine($@"The value of pi is {(round ? Math.PI.ToString() : Math.PI.ToString("F2"))}");
                }
            }
            """,
            ReferenceAssemblyCatalog.Latest);
    }
}
