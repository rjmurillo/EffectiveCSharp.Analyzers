using CodeFixVerifier = EffectiveCSharp.Analyzers.Tests.Helpers.AnalyzerAndCodeFixVerifier<EffectiveCSharp.Analyzers.ReplaceStringFormatAnalyzer, EffectiveCSharp.Analyzers.ReplaceStringFormatCodeFixProvider>;
using Verifier = EffectiveCSharp.Analyzers.Tests.Helpers.AnalyzerVerifier<EffectiveCSharp.Analyzers.ReplaceStringFormatAnalyzer>;

namespace EffectiveCSharp.Analyzers.Tests;

#pragma warning disable IDE0028 // We cannot simply object creation on TheoryData because we need to convert from object[] to string, the way it is now is cleaner
#pragma warning disable SA1204 // Static elements should appear before instance elements - we suppress to keep theorydata next to theory

public class ReplaceStringFormatTests
{
    public static TheoryData<string, string> TestData()
    {
        TheoryData<string> data = new()
        {
            """
            var str = {|ECS0004:string.Format("Hello, {0}!", "world")|};
            """,
            """
            var str = string.Format("Hello, world!", "world");
            """,
            """
            var str = {|ECS0004:string.Format("The value of pi is {0}", Math.PI)|};
            """,
            """
            var str = {|ECS0004:string.Format("The value of pi is {0:F2}", Math.PI)|};
            """,
            """
            var str = {|ECS0004:string.Format("The value of pi is {0}", Math.PI.ToString())|};
            """,
            """
            var str = {|ECS0004:string.Format("The value of pi is {0}", Math.PI.ToString("F2"))|};
            """,

            // The code generated by the string interpolation will call a formatting
            // method whose argument is a params array of objects (until .NET 9)
            // The Math.PI property is a double, which is a value type. In order to
            // coerce that double to be an Object for the params, it will be boxed.
            """
            Console.WriteLine($"The value of pi is {Math.PI}");
            """,

            // You should use expressions to convert arguments to strings to avoid
            // the box
            """
            Console.WriteLine($"The value of pi is {Math.PI.ToString()}");
            """,
            """
            Console.WriteLine($"The value of pi is {Math.PI.ToString("F2")}");
            """,
            """
            Console.WriteLine($"The value of pi is {Math.PI:F2}");
            """,
            """
            bool round = false;
            Console.WriteLine($@"The value of pi is {(round ? Math.PI.ToString() : Math.PI.ToString("F2"))}");
            """,
        };

#pragma warning disable MA0002 // IEqualityComparer<string> or IComparer<string> is missing
        return data.WithReferenceAssemblyGroups(p => ReferenceAssemblyCatalog.DotNetCore.Contains(p));
#pragma warning restore MA0002 // IEqualityComparer<string> or IComparer<string> is missing
    }

    [Theory]
    [MemberData(nameof(TestData))]
    public async Task Analyzer(string referenceAssemblyGroup, string source)
    {
        await Verifier.VerifyAnalyzerAsync(
            $$"""
              public class Program
              {
                void Main()
                {
                  {{source}}
                }
              }
              """,
            referenceAssemblyGroup);
    }

    public static TheoryData<string, string> CodeFixTestData()
#pragma warning restore SA1204 // Static elements should appear before instance elements
    {
        TheoryData<string, string> data = new()
        {
            {
                """
                var str = {|ECS0004:string.Format("Hello, {0}!", "world")|};
                """,
                """
                var str = $"Hello, {"world"}!";
                """
            },
            {
                """
                var str = {|ECS0004:string.Format("The value of pi is {0:F2}", Math.PI)|};
                """,
                """
                var str = $"The value of pi is {Math.PI:F2}";
                """
            },
            {
                """
                var str = {|ECS0004:string.Format("The value of pi is {0}", Math.PI.ToString("F2"))|};
                """,
                """
                var str = $"The value of pi is {Math.PI.ToString("F2")}";
                """
            },
            {
                """
                bool round = false;
                string str = {|ECS0004:string.Format("The value of pi is {0}", round ? Math.PI.ToString() : Math.PI.ToString("F2"))|};
                """,
                """
                bool round = false;
                string str = $"The value of pi is {(round ? Math.PI.ToString() : Math.PI.ToString("F2"))}";
                """
            },
        };

        return data;
    }

    [Theory]
    [MemberData(nameof(CodeFixTestData))]
    public async Task CodeFix(string source, string @fixed)
    {
        string testCode = $$"""
                            public class Program
                            {
                                void Main()
                                {
                                    {{source}}
                                }
                            }
                            """;

        string fixedCode = $$"""
                            public class Program
                            {
                                void Main()
                                {
                                    {{@fixed}}
                                }
                            }
                            """;

        await CodeFixVerifier.VerifyCodeFixAsync(testCode, fixedCode, ReferenceAssemblyCatalog.Latest);
    }
}
